import { Behavior } from '@microsoft/fast-element';
import { DecoratorAttributeConfiguration } from '@microsoft/fast-element';
import { Direction } from '@microsoft/fast-web-utilities';
import { ElementStyles } from '@microsoft/fast-element';
import { FASTElement } from '@microsoft/fast-element';
import { Orientation } from '@microsoft/fast-web-utilities';
import { PartialFASTElementDefinition } from '@microsoft/fast-element';

/**
 * An Accordion Custom HTML Element
 * Implements {@link https://www.w3.org/TR/wai-aria-practices-1.1/#accordion | ARIA Accordion}.
 * @public
 *
 * @remarks
 * Designed to be used with {@link @microsoft/fast-foundation#AccordionTemplate} and {@link @microsoft/fast-foundation#(AccordionItem:class)}.
 */
export declare class Accordion extends FASTElement {
    /**
     * Controls the expand mode of the Accordion, either allowing
     * single or multiple item expansion.
     * @public
     *
     * @remarks
     * HTML attribute: expand-mode
     */
    expandmode: AccordionExpandMode;
    /**
     * @internal
     */
    accordionItems: HTMLElement[];
    /**
     * @internal
     */
    accordionItemsChanged(oldValue: any, newValue: any): void;
    private activeid;
    private activeItemIndex;
    private accordionIds;
    private change;
    private setItems;
    private resetItems;
    private removeItemListeners;
    private activeItemChange;
    private getItemIds;
    private isSingleExpandMode;
    private handleItemKeyDown;
    private adjust;
    private focusItem;
}

/**
 * Expand mode for {@link Accordion}
 * @public
 */
export declare enum AccordionExpandMode {
    /**
     * Designates only a single {@link @microsoft/fast-foundation#(AccordionItem:class) } can be open a time.
     */
    single = "single",
    /**
     * Designates multiple {@link @microsoft/fast-foundation#(AccordionItem:class) | AccordionItems} can be open simultaneously.
     */
    multi = "multi"
}

/**
 * An individual item in an {@link @microsoft/fast-foundation#(Accordion:class) }.
 * @public
 */
export declare class AccordionItem extends FASTElement {
    /**
     * Configures the {@link https://www.w3.org/TR/wai-aria-1.1/#aria-level | level} of the
     * heading element.
     *
     * @defaultValue 2
     * @public
     * @remarks
     * HTML attribute: heading-level
     */
    headinglevel: 1 | 2 | 3 | 4 | 5 | 6;
    /**
     * Expands or collapses the item.
     *
     * @public
     * @remarks
     * HTML attribute: expanded
     */
    expanded: boolean;
    /**
     * The item ID
     *
     * @public
     * @remarks
     * HTML Attribute: id
     */
    id: string;
    /**
     * @internal
     */
    expandbutton: HTMLElement;
    /**
     * @internal
     */
    clickHandler: (e: MouseEvent) => void;
    private change;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface AccordionItem extends StartEnd {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(AccordionItem:class)} component.
 * @public
 */
export declare const AccordionItemTemplate: import("@microsoft/fast-element").ViewTemplate<AccordionItem, any>;

/**
 * The template for the {@link @microsoft/fast-foundation#Accordion} component.
 * @public
 */
export declare const AccordionTemplate: import("@microsoft/fast-element").ViewTemplate<Accordion, any>;

/**
 * An Anchor Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element }.
 *
 * @public
 */
export declare class Anchor extends FASTElement {
    /**
     * Prompts the user to save the linked URL. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: download
     */
    download: string;
    /**
     * The URL the hyperlink references. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: href
     */
    href: string;
    /**
     * Hints at the language of the referenced resource. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: hreflang
     */
    hreflang: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: ping
     */
    ping: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: referrerpolicy
     */
    referrerpolicy: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: rel
     */
    rel: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: target
     */
    target: "_self" | "_blank" | "_parent" | "_top";
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/a | <a> element } for more information.
     * @public
     * @remarks
     * HTML Attribute: type
     */
    type: string;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface Anchor extends StartEnd, DelegatesARIALink {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Anchor:class)} component.
 * @public
 */
export declare const AnchorTemplate: import("@microsoft/fast-element").ViewTemplate<Anchor, any>;

/**
 * Apply mixins to a constructor.
 * Sourced from {@link https://www.typescriptlang.org/docs/handbook/mixins.html | TypeScript Documentation }.
 * @public
 */
export declare function applyMixins(derivedCtor: any, ...baseCtors: any[]): void;

/**
 * Some states and properties are applicable to all host language elements regardless of whether a role is applied.
 * The following global states and properties are supported by all roles and by all base markup elements.
 * {@link https://www.w3.org/TR/wai-aria-1.1/#global_states}
 *
 * This is intended to be used as a mixin. Be sure you extend FASTElement.
 *
 * @public
 */
export declare class ARIAGlobalStatesAndProperties {
    /**
     * Indicates whether assistive technologies will present all, or only parts of,
     * the changed region based on the change notifications defined by the aria-relevant attribute.
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-atomic}
     *
     * @public
     * @remarks
     * HTML Attribute: aria-atomic
     */
    ariaAtomic: "true" | "false";
    /**
     * Indicates an element is being modified and that assistive technologies MAY want to wait
     * until the modifications are complete before exposing them to the user.
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-busy}
     *
     * @public
     * @remarks
     * HTML Attribute: aria-busy
     */
    ariaBusy: "true" | "false";
    /**
     * Identifies the element (or elements) whose contents or presence are controlled by the current element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-controls}
     * @public
     * @remarks
     * HTML Attribute: aria-controls
     */
    ariaControls: string;
    /**
     * Indicates the element that represents the current item within a container or set of related elements.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-current}
     * @public
     * @remarks
     * HTML Attribute: aria-current
     */
    ariaCurrent: "page" | "step" | "location" | "date" | "time" | "true" | "false" | string;
    /**
     * Identifies the element (or elements) that describes the object.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-describedby}
     * @public
     * @remarks
     * HTML Attribute: aria-describedby
     */
    ariaDescribedby: string;
    /**
     * Identifies the element that provides a detailed, extended description for the object.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-details}
     * @public
     * @remarks
     * HTML Attribute: aria-details
     */
    ariaDetails: string;
    /**
     * Identifies the element that provides a detailed, extended description for the object.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-disabled}
     * @public
     * @remarks
     * HTML Attribute: aria-disabled
     */
    ariaDisabled: "true" | "false";
    /**
     * Identifies the element that provides an error message for the object.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-errormessage}
     * @public
     * @remarks
     * HTML Attribute: aria-errormessage
     */
    ariaErrormessage: string;
    /**
     * Identifies the next element (or elements) in an alternate reading order of content which, at the user's discretion,
     * allows assistive technology to override the general default of reading in document source order.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-flowto}
     * @public
     * @remarks
     * HTML Attribute: aria-flowto
     */
    ariaFlowto: string;
    /**
     * Indicates the availability and type of interactive popup element,
     * such as menu or dialog, that can be triggered by an element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-haspopup}
     * @public
     * @remarks
     * HTML Attribute: aria-haspopup
     */
    ariaHaspopup: "false" | "true" | "menu" | "listbox" | "tree" | "grid" | "dialog";
    /**
     * Indicates whether the element is exposed to an accessibility API
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-hidden}
     * @public
     * @remarks
     * HTML Attribute: aria-hidden
     */
    ariaHidden: "false" | "true" | undefined;
    /**
     * Indicates the entered value does not conform to the format expected by the application.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-invalid}
     * @public
     * @remarks
     * HTML Attribute: aria-invalid
     */
    ariaInvalid: "false" | "true" | "grammar" | "spelling";
    /**
     * Indicates keyboard shortcuts that an author has implemented to activate or give focus to an element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-keyshortcuts}
     * @public
     * @remarks
     * HTML Attribute: aria-keyshortcuts
     */
    ariaKeyshortcuts: string;
    /**
     * Defines a string value that labels the current element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-label}
     * @public
     * @remarks
     * HTML Attribute: aria-label
     */
    ariaLabel: string;
    /**
     * Identifies the element (or elements) that labels the current element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-labelledby}
     * @public
     * @remarks
     * HTML Attribute: aria-labelledby
     */
    ariaLabelledby: string;
    /**
     * Indicates that an element will be updated, and describes the types of updates the user agents,
     * assistive technologies, and user can expect from the live region.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-live}
     * @public
     * @remarks
     * HTML Attribute: aria-live
     */
    ariaLive: "assertive" | "off" | "polite";
    /**
     * Identifies an element (or elements) in order to define a visual,
     * functional, or contextual parent/child relationship between DOM elements
     * where the DOM hierarchy cannot be used to represent the relationship.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-owns}
     * @public
     * @remarks
     * HTML Attribute: aria-owns
     */
    ariaOwns: string;
    /**
     * Indicates what notifications the user agent will trigger when the accessibility tree within a live region is modified.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-relevant}
     * @public
     * @remarks
     * HTML Attribute: aria-relevant
     */
    ariaRelevant: "additions" | "additions text" | "all" | "removals" | "text";
    /**
     * Defines a human-readable, author-localized description for the role of an element.
     *
     * {@link https://www.w3.org/TR/wai-aria-1.1/#aria-roledescription}
     * @public
     * @remarks
     * HTML Attribute: aria-roledescription
     */
    ariaRoledescription: string;
}

/**
 * A Badge Custom HTML Element.
 *
 * @public
 */
export declare class Badge extends FASTElement {
    /**
     * Indicates the badge should have a filled style.
     * @public
     * @remarks
     * HTML Attribute: fill
     */
    fill: string;
    /**
     * Indicates the badge should have a filled style.
     *
     * @public
     * @remarks
     * HTML Attribute: color
     * @privateRemarks
     * Revisit this once we have a better story for ensuring proper contrast from author defined `fill`
     */
    color: string;
    /**
     * Indicates the element should be circular
     *
     * @public
     * @remarks
     * HTML Attribute: circular
     */
    circular: boolean;
}

/**
 * The template for the {@link @microsoft/fast-foundation#Badge} component.
 * @public
 */
export declare const BadgeTemplate: import("@microsoft/fast-element").ViewTemplate<Badge, any>;

/**
 * An Progress HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#progressbar | ARIA progressbar }.
 *
 * @public
 */
export declare class BaseProgress extends FASTElement {
    /**
     * The value of the progress
     * @public
     * @remarks
     * HTML Attribute: value
     */
    value: number;
    /**
     * The minimum value
     * @public
     * @remarks
     * HTML Attribute: min
     */
    min: number;
    /**
     * The maximum value
     * @public
     * @remarks
     * HTML Attribute: max
     */
    max: number;
    /**
     * Indicates the progress is paused
     * @public
     * @remarks
     * HTML Attribute: paused
     */
    paused: any;
}

/**
 * An Button Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element }.
 *
 * @public
 */
export declare class Button extends FormAssociated<HTMLInputElement> {
    /**
     * Determines if the element should receive document focus on page load.
     *
     * @public
     * @remarks
     * HTML Attribute: autofocus
     */
    autofocus: boolean;
    /**
     * The id of a form to associate the element to.
     *
     * @public
     * @remarks
     * HTML Attribute: form
     */
    formId: string;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formaction
     */
    formaction: string;
    private formactionChanged;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formenctype
     */
    formenctype: string;
    private formenctypeChanged;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formmethod
     */
    formmethod: string;
    private formmethodChanged;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formnovalidate
     */
    formnovalidate: boolean;
    private formnovalidateChanged;
    /**
     * See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/button | <button> element} for more details.
     *
     * @public
     * @remarks
     * HTML Attribute: formtarget
     */
    formtarget: "_self" | "_blank" | "_parent" | "_top";
    private formtargetChanged;
    /**
     * The button type.
     *
     * @public
     * @remarks
     * HTML Attribute: type
     */
    type: "submit" | "reset" | "button";
    private typeChanged;
    protected proxy: HTMLInputElement;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * Submits the parent form
     */
    private handleSubmission;
    /**
     * Resets the parent form
     */
    private handleFormReset;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface Button extends StartEnd, DelegatesARIAButton {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Button:class)} component.
 * @public
 */
export declare const ButtonTemplate: import("@microsoft/fast-element").ViewTemplate<Button, any>;

/**
 * An Card Custom HTML Element.
 *
 * @public
 */
export declare class Card extends FASTElement {
}

/**
 * The template for the {@link @microsoft/fast-foundation#Card} component.
 * @public
 */
export declare const CardTemplate: import("@microsoft/fast-element").ViewTemplate<Card, any>;

/**
 * A Switch Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#checkbox | ARIA checkbox }.
 *
 * @public
 */
export declare class Checkbox extends FormAssociated<HTMLInputElement> {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * The element's value to be included in form submission when checked.
     * Default to "on" to reach parity with input[type="checkbox"]
     *
     * @internal
     */
    protected initialValue: string;
    /**
     * Provides the default checkedness of the input element
     * Passed down to proxy
     *
     * @public
     * @remarks
     * HTML Attribute: checked
     */
    checkedAttribute: boolean;
    private checkedAttributeChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * Initialized to the value of the checked attribute. Can be changed independently of the "checked" attribute,
     * but changing the "checked" attribute always additionally sets this value.
     *
     * @public
     */
    defaultChecked: boolean;
    private defaultCheckedChanged;
    /**
     * The checked state of the control.
     *
     * @public
     */
    checked: boolean;
    private checkedChanged;
    protected proxy: HTMLInputElement;
    /**
     * The indeterminate state of the control
     */
    indeterminate: boolean;
    /**
     * Tracks whether the "checked" property has been changed.
     * This is necessary to provide consistent behavior with
     * normal input checkboxes
     */
    private dirtyChecked;
    /**
     * Set to true when the component has constructed
     */
    private constructed;
    constructor();
    /**
     * @internal
     */
    connectedCallback(): void;
    private updateForm;
    /**
     * @internal
     */
    keypressHandler: (e: KeyboardEvent) => void;
    /**
     * @internal
     */
    clickHandler: (e: MouseEvent) => void;
}

/**
 * The template for the {@link @microsoft/fast-foundation#Checkbox} component.
 * @public
 */
export declare const CheckboxTemplate: import("@microsoft/fast-element").ViewTemplate<Checkbox, any>;

/**
 * Retrieves the "composed parent" element of a node, ignoring DOM tree boundaries.
 * When the parent of a node is a shadow-root, it will return the host
 * element of the shadow root. Otherwise it will return the parent node or null if
 * no parent node exists.
 * @param element - The element for which to retrieve the composed parent
 *
 * @public
 */
export declare function composedParent<T extends HTMLElement>(element: T): HTMLElement | null;

/**
 * A Behavior that will register to a {@link CSSCustomPropertyTarget} when bound.
 *
 * @public
 */
export declare class CSSCustomPropertyBehavior implements Behavior, CSSCustomPropertyDefinition {
    /**
     * The name of the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property}.
     * @public
     */
    readonly name: CSSCustomPropertyDefinition["name"];
    /**
     * The value or function that will resolve the value of
     * the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property}.
     * @public
     */
    readonly value: CSSCustomPropertyDefinition["value"];
    /**
     * The name of the CSSCustomPropertyBehavior formatted
     * as a {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property}.
     * @public
     */
    readonly propertyName: string;
    /**
     * Return the {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property} formatted
     * as a {@link https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties | CSS variable}.
     *
     * @public
     */
    readonly var: string;
    /**
     *
     * @param name - The name of the custom property, without the prepended "--" required by {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom properties}.
     * @param value - The value of the custom property or a function that resolves the value.
     * @param host - A function that resolves the host element that will register the behavior
     */
    constructor(name: string, value: CSSCustomPropertyDefinition["value"], host: (source: HTMLElement) => Partial<CSSCustomPropertyTarget> | null);
    private host;
    /**
     * Binds the behavior to a source element
     * @param source - The source element being bound
     * @internal
     */
    bind(source: HTMLElement): void;
    /**
     * Unbinds the behavior from the source element.
     * @param source - The source element being unbound
     * @internal
     */
    unbind(source: HTMLElement): void;
}

/**
 * Create a CSS Custom Property behavior.
 * @param name - The name of the CSS custom property
 * @param value - The value or value resolver of the custom property
 * @param host - A function to resolve the element to host the CSS custom property
 * @public
 */
export declare function cssCustomPropertyBehaviorFactory(name: string, value: string | ((...arg: any[]) => string), host: (source: typeof FASTElement & HTMLElement) => Partial<CSSCustomPropertyTarget> | null): CSSCustomPropertyBehavior;

/**
 * A structure representing a {@link https://developer.mozilla.org/en-US/docs/Web/CSS/--* | CSS custom property}.
 * @public
 */
export declare interface CSSCustomPropertyDefinition {
    /**
     * The custom property name
     */
    name: string;
    /**
     * The value of the custom property or a function that resolves the value
     */
    value: string | ((...args: any[]) => string);
}

/**
 * A structure that can register and unregister {@link CSSCustomPropertyDefinition | CSSCustomPropertyDefinitions}.
 * @public
 */
export declare interface CSSCustomPropertyTarget {
    registerCSSCustomProperty(behavior: CSSCustomPropertyDefinition): void;
    unregisterCSSCustomProperty(behavior: CSSCustomPropertyDefinition): void;
    disconnectedCSSCustomPropertyRegistry: CSSCustomPropertyDefinition[] | void;
}

/**
 * Define all possible CSS display values.
 * @public
 */
export declare type CSSDisplayPropertyValue = "block" | "contents" | "flex" | "grid" | "inherit" | "initial" | "inline" | "inline-block" | "inline-flex" | "inline-grid" | "inline-table" | "list-item" | "none" | "run-in" | "table" | "table-caption" | "table-cell" | "table-column" | "table-column-group" | "table-footer-group" | "table-header-group" | "table-row" | "table-row-group";

/**
 * Configuration object for defining a {@link @microsoft/fast-foundation#DesignSystemProvider} property
 *
 * @public
 */
export declare interface DecoratorDesignSystemPropertyConfiguration extends Omit<DecoratorAttributeConfiguration, "attribute"> {
    /**
     * The HTML attribute name to map the property to - defaults to the property name.
     */
    attribute?: string | false;
    /**
     * An optional property to control the name of the css custom property being created.
     * If omitted, the css custom property will share a name with attribute if specified, otherwise the property name being decorated.
     * If assigned a false value, no css custom property will be created.
     */
    cssCustomProperty?: string | false;
    /**
     * The default value of the property. Will be assigned when the use-defaults attribute is used.
     */
    default: any;
}

/**
 * Defines a design-system-provider custom element, registering the tag-name so that the element can be property resolved by {@link DesignSystemConsumer | DesignSystemConsumers}.
 *
 * @param nameOrDef - the name or {@link @microsoft/fast-element#PartialFASTElementDefinition | element definition}
 * @public
 */
export declare function defineDesignSystemProvider(nameOrDef: string | PartialFASTElementDefinition): <T extends typeof DesignSystemProvider>(providerCtor: T) => void;

/**
 * Includes ARIA states and properties relating to the ARIA button role
 *
 * @public
 */
export declare class DelegatesARIAButton extends ARIAGlobalStatesAndProperties {
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#button} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-expanded
     */
    ariaExpanded: "true" | "false" | undefined;
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#button} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-pressed
     */
    ariaPressed: "true" | "false" | "mixed" | undefined;
}

/**
 * Includes ARIA states and properties relating to the ARIA link role
 *
 * @public
 */
export declare class DelegatesARIALink extends ARIAGlobalStatesAndProperties {
    /**
     * See {@link https://www.w3.org/WAI/PF/aria/roles#link} for more information
     * @public
     * @remarks
     * HTML Attribute: aria-expanded
     */
    ariaExpanded: "true" | "false" | undefined;
}

/**
 * Includes ARIA states and properties relating to the ARIA link role
 *
 * @public
 */
export declare class DelegatesARIATextbox extends ARIAGlobalStatesAndProperties {
}

/**
 * Defines a structure that consumes from a DesignSystemProvider
 * @public
 */
export declare interface DesignSystemConsumer {
    provider: DesignSystemProvider | null;
}

/**
 * Behavior to connect a {@link DesignSystemConsumer} to the nearest {@link DesignSystemProvider}
 * @public
 */
export declare const designSystemConsumerBehavior: Behavior;

/**
 * Decorator to declare a property as a design-system property.
 * Intended to be used with the {@link @microsoft/fast-foundation#DesignSystemProvider}
 * @param config - {@link DecoratorDesignSystemPropertyConfiguration}
 *
 * @public
 */
export declare function designSystemProperty<T extends DesignSystemProvider>(config: DecoratorDesignSystemPropertyConfiguration): (source: T, property: string) => void;

/**
 * A element to provide Design System values to consumers via CSS custom properties
 * and to resolve recipe values.
 *
 * @public
 */
export declare class DesignSystemProvider extends FASTElement implements CSSCustomPropertyTarget, DesignSystemConsumer {
    /**
     * Stores a list of all element tag-names that associated
     * to design-system-providers
     */
    private static _tagNames;
    /**
     * Read all tag-names that are associated to
     * design-system-providers
     *
     * @public
     */
    static get tagNames(): string[];
    /**
     * Determines if an element is a DesignSystemProvider
     * @param el - The element to test
     *
     * @public
     */
    static isDesignSystemProvider(el: HTMLElement | DesignSystemProvider): el is DesignSystemProvider;
    /**
     * Finds the closest design-system-provider
     * to an element.
     *
     * @param el - The element from which to begin searching.
     * @public
     */
    static findProvider(el: HTMLElement & Partial<DesignSystemConsumer>): DesignSystemProvider | null;
    /**
     * Registers a tag-name to be associated with
     * the design-system-provider class. All tag-names for DesignSystemProvider elements
     * must be registered for proper property resolution.
     *
     * @param tagName - the HTML Element tag name to register as a DesignSystemProvider.
     *
     * @public
     */
    static registerTagName(tagName: string): void;
    /**
     * Allows other components to identify this as a provider.
     * Using instanceof DesignSystemProvider did not seem to work.
     *
     * @public
     */
    readonly isDesignSystemProvider = true;
    /**
     * The design-system object.
     * This is "observable" but will notify on object mutation
     * instead of object assignment
     *
     * @public
     */
    designSystem: {};
    /**
     * Applies the default design-system values to the instance where properties
     * are not explicitly assigned. This is generally used to set the root design
     * system context.
     *
     * @public
     * @remarks
     * HTML Attribute: use-defaults
     */
    useDefaults: boolean;
    private useDefaultsChanged;
    /**
     * The parent provider the the DesignSystemProvider instance.
     * @public
     */
    provider: DesignSystemProvider | null;
    private providerChanged;
    /**
     * Stores all CSSCustomPropertyDefinitions registered with the provider.
     */
    private cssCustomPropertyDefinitions;
    /**
     * Track all design system property names so we can react to changes
     * in those properties. Do not initialize or it will clobber value stored
     * by the decorator.
     *
     * @internal
     */
    designSystemProperties: {
        [propertyName: string]: Required<Pick<DecoratorDesignSystemPropertyConfiguration, "cssCustomProperty" | "default">>;
    };
    /**
     * Allows CSSCustomPropertyDefinitions to register on this element *before* the constructor
     * has run and the registration APIs exist. This can manifest when the DOM
     * is parsed (and custom element tags exist in the DOM) before the script defining the custom elements
     * is parsed, and when the elements using the CSSCustomPropertyBehaviors
     * are defined before this DesignSystemProvider.
     *
     * @public
     * @deprecated - use disconnectedRegistry
     */
    disconnectedCSSCustomPropertyRegistry: CSSCustomPropertyDefinition[];
    /**
     * Allows arbitrary registration to the provider before the constructor runs.
     * When the constructor runs, all registration functions in the disconnectedRegistry
     * will be invoked with the provider instance.
     *
     * @public
     */
    disconnectedRegistry: Array<(provider: DesignSystemProvider) => void> | void;
    /**
     * The target of CSSCustomPropertyDefinitions registered
     * with the provider. This will be #1 when adoptedStyleSheets are supported
     * and #2 when they are not.
     *
     * 1. The `style` property of a CSSStyleRule on an adoptedStyleSheet
     * 2. The `style` property of the element, resulting in inline styles
     */
    private customPropertyTarget;
    /**
     * Handle changes to design-system-provider IDL and content attributes
     * that reflect to design-system properties.
     */
    private attributeChangeHandler;
    /**
     * Handle changes to the local design-system property.
     */
    private localDesignSystemChangeHandler;
    /**
     * Handle changes to the upstream design-system provider
     */
    private providerDesignSystemChangeHandler;
    constructor();
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * Register a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} with the DeignSystemProvider.
     * Registering a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} will create the CSS custom property.
     *
     * @param behavior - The {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} to register.
     * @public
     */
    registerCSSCustomProperty(behavior: CSSCustomPropertyDefinition): void;
    /**
     * Unregister a {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} from the DeignSystemProvider.
     * If all registrations of the definition are unregistered, the CSS custom property will be removed.
     *
     * @param behavior - The {@link @microsoft/fast-foundation#CSSCustomPropertyDefinition} to register.
     * @public
     */
    unregisterCSSCustomProperty(behavior: CSSCustomPropertyDefinition): void;
    /**
     * Writes all CSS custom property definitions to the design system provider.
     */
    private writeCustomProperties;
    /**
     * Writes a CSS custom property to the design system provider,
     * evaluating any function values with the design system.
     */
    private setCustomProperty;
    /**
     * Removes a CSS custom property from the provider.
     */
    private deleteCustomProperty;
    /**
     * Evaluates a CSSCustomPropertyDefinition with the current design system.
     *
     * @public
     */
    evaluate(definition: CSSCustomPropertyDefinition): string;
    /**
     * Synchronize the provider's design system with the local
     * overrides. Any value defined on the instance will take priority
     * over the value defined by the provider
     */
    private syncDesignSystemWithProvider;
    private isValidDesignSystemValue;
}

/**
 * @internal
 * @deprecated - use {@link defineDesignSystemProvider}
 */
export declare const designSystemProvider: typeof defineDesignSystemProvider;

/**
 * The template for the {@link @microsoft/fast-foundation#DesignSystemProvider} component.
 * @public
 */
export declare const DesignSystemProviderTemplate: import("@microsoft/fast-element").ViewTemplate<DesignSystemProvider, any>;

/**
 * A Switch Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#dialog | ARIA dialog }.
 *
 * @public
 */
export declare class Dialog extends FASTElement {
    /**
     * Indicates the element is modal. When modal, user interaction will be limited to the contents of the element.
     * @public
     * @defaultValue - true
     * @remarks
     * HTML Attribute: modal
     */
    modal: boolean;
    /**
     * The hidden state of the element.
     *
     * @public
     * @defaultValue - false
     * @remarks
     * HTML Attribute: hidden
     */
    hidden: boolean;
    /**
     * Indicates that the dialog should trap focus.
     *
     * @public
     * @defaultValue - true
     * @remarks
     * HTML Attribute: trap-focus
     */
    trapFocus: boolean;
    /**
     * The id of the element describing the dialog.
     * @public
     * @remarks
     * HTML Attribute: aria-describedby
     */
    ariaDescribedby: string;
    /**
     * The id of the element labeling the dialog.
     * @public
     * @remarks
     * HTML Attribute: aria-labelledby
     */
    ariaLabelledby: string;
    /**
     * The label surfaced to assistive technologies.
     *
     * @public
     * @remarks
     * HTML Attribute: aria-label
     */
    ariaLabel: string;
    /**
     * @internal
     */
    dialog: HTMLDivElement;
    private tabbableElements;
    private observer;
    /**
     * @internal
     */
    dismiss(): void;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    private onChildListChange;
    private trapFocusChanged;
    private handleDocumentKeydown;
    private handleDocumentFocus;
    private handleTabKeyDown;
    /**
     * focus on first element of tab queue
     */
    private focusFirstElement;
    /**
     * we should only focus if focus has not already been brought to the dialog
     */
    private shouldForceFocus;
    /**
     * TODO: Issue #2742 - https://github.com/microsoft/fast/issues/2742
     * This is a placeholder function to check if the hidden attribute is present
     * Currently there is not support for boolean attributes.
     * Once support is added, we will simply use this.hidden.
     */
    private isDialogHidden;
    /**
     * TODO: Issue #2742 - https://github.com/microsoft/fast/issues/2742
     * This is a placeholder function to check if the trapFocus attribute is present
     * Currently there is not support for boolean attributes.
     * Once support is added, we will simply use this.trapFocus.
     */
    private shouldDialogTrapFocus;
}

/**
 * The template for the {@link @microsoft/fast-foundation#Dialog} component.
 * @public
 */
export declare const DialogTemplate: import("@microsoft/fast-element").ViewTemplate<Dialog, any>;

/**
 * Behavior to conditionally apply LTR and RTL stylesheets. To determine which to apply,
 * the behavior will use the nearest DesignSystemProvider's 'direction' design system value.
 *
 * @public
 * @example
 * ```ts
 * import { css } from "@microsoft/fast-element";
 * import { DirectionalStyleSheetBehavior } from "@microsoft/fast-foundation";
 *
 * css`
 *  // ...
 * `.withBehaviors(new DirectionalStyleSheetBehavior(
 *   css`:host { content: "ltr"}`),
 *   css`:host { content: "rtl"}`),
 * )
 * ```
 */
export declare class DirectionalStyleSheetBehavior implements Behavior {
    private ltr;
    private rtl;
    private cache;
    constructor(ltr: ElementStyles | null, rtl: ElementStyles | null);
    /**
     * @internal
     */
    bind(source: typeof FASTElement & HTMLElement): void;
    /**
     * @internal
     */
    unbind(source: typeof FASTElement & HTMLElement): void;
    private attach;
}

/**
 * The CSS value for disabled cursors.
 * @public
 */
export declare const disabledCursor = "not-allowed";

/**
 * Applies a CSS display property.
 * Also adds CSS rules to not display the element when the [hidden] attribute is applied to the element.
 * @param display - The CSS display property value
 * @public
 */
export declare function display(displayValue: CSSDisplayPropertyValue): string;

/**
 * A Divider Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#separator | ARIA separator } or {@link https://www.w3.org/TR/wai-aria-1.1/#presentation | ARIA presentation}.
 *
 * @public
 */
export declare class Divider extends FASTElement {
    /**
     * The role of the element.
     *
     * @public
     * @defaultValue - {@link DividerRole.separator}
     * @remarks
     * HTML Attribute: role
     */
    role: DividerRole;
}

/**
 * Divider roles
 * @public
 */
export declare enum DividerRole {
    /**
     * The divider semantically separates content
     */
    separator = "separator",
    /**
     * The divider has no semantic value and is for visual presentation only.
     */
    presentation = "presentation"
}

/**
 * The template for the {@link @microsoft/fast-foundation#Divider} component.
 * @public
 */
export declare const DividerTemplate: import("@microsoft/fast-element").ViewTemplate<Divider, any>;

/**
 * Source:
 * https://html.spec.whatwg.org/multipage/custom-elements.html#elementinternals
 */
declare interface ElementInternals {
    /**
     * Returns the form owner of internals target element.
     */
    readonly form: HTMLFormElement | null;
    /**
     * Returns a NodeList of all the label elements that internals target element is associated with.
     */
    readonly labels: NodeList;
    /**
     * Returns the error message that would be shown to the user if internals target element was to be checked for validity.
     */
    readonly validationMessage: string;
    /**
     * Returns the ValidityState object for internals target element.
     */
    readonly validity: ValidityState;
    /**
     * Returns true if internals target element will be validated when the form is submitted; false otherwise.
     */
    readonly willValidate: boolean;
    /**
     * Returns true if internals target element has no validity problems; false otherwise. Fires an invalid event at the element in the latter case.
     */
    checkValidity(): boolean;
    /**
     * Returns true if internals target element has no validity problems; otherwise,
     * returns false, fires an invalid event at the element, and (if the event isn't canceled) reports the problem to the user.
     */
    reportValidity(): boolean;
    /**
     * Sets both the state and submission value of internals target element to value.
     *
     * While "null" isn't enumerated as a argument type (here)[https://html.spec.whatwg.org/multipage/custom-elements.html#the-elementinternals-interface],
     * In practice it appears to remove the value from the form data on submission. Adding it as a valid type here
     * becuase that capability is required for checkbox and radio types
     */
    setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;
    /**
     * Marks internals target element as suffering from the constraints indicated by the flags argument,
     * and sets the element's validation message to message.
     * If anchor is specified, the user agent might use
     * it to indicate problems with the constraints of internals target
     * element when the form owner is validated interactively or reportValidity() is called.
     */
    setValidity(flags: ValidityStateFlags, message?: string, anchor?: HTMLElement_2): void;
}

declare let ElementInternals: {
    prototype: ElementInternals;
    new (): ElementInternals;
};

/**
 * The template for the end element.
 * For use with {@link StartEnd}
 *
 * @public
 */
export declare const endTemplate: import("@microsoft/fast-element").ViewTemplate<StartEnd, any>;

/**
 * A Flipper Custom HTML Element.
 * Flippers are a form of button that implies directional content navigation, such as in a carousel.
 *
 * @public
 */
export declare class Flipper extends FASTElement {
    /**
     * The disabled state of the flipper.
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    /**
     * Indicates the flipper should be hidden from assistive technology. Because flippers are often supplementary navigation, they are often hidden from assistive technology.
     *
     * @public
     * @defaultValue - true
     * @remarks
     * HTML Attribute: aria-hidden
     */
    hiddenFromAT: boolean;
    /**
     * The direction that the flipper implies navigating.
     *
     * @public
     * @remarks
     * HTML Attribute: direction
     */
    direction: FlipperDirection;
}

/**
 * The direction options for flipper.
 * @public
 */
export declare enum FlipperDirection {
    next = "next",
    previous = "previous"
}

/**
 * The template for the {@link @microsoft/fast-foundation#Flipper} component.
 * @public
 */
export declare const FlipperTemplate: import("@microsoft/fast-element").ViewTemplate<Flipper, any>;

/**
 * The string representing the focus selector to be used. Value
 * will be "focus-visible" when https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo
 * is supported and "focus" when it is not.
 *
 * @public
 */
export declare const focusVisible: string;

/**
 * This can be used to construct a behavior to apply a forced-colors only stylesheet.
 * @public
 */
export declare const forcedColorsStylesheetBehavior: (styles: ElementStyles) => MatchMediaStyleSheetBehavior;

/**
 * Base class for providing Custom Element Form Association.
 *
 * @alpha
 */
export declare abstract class FormAssociated<T extends HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement> extends FASTElement {
    /**
     * Must evaluate to true to enable elementInternals.
     * Feature detects API support and resolve respectively
     *
     * @internal
     */
    static get formAssociated(): boolean;
    /**
     * Returns the validity state of the element
     */
    get validity(): ValidityState;
    /**
     * Retrieve a reference to the associated form.
     * Returns null if not associated to any form.
     */
    get form(): HTMLFormElement | null;
    /**
     * Retrieve the localized validation message,
     * or custom validation message if set.
     */
    get validationMessage(): string;
    /**
     * Whether the element will be validated when the
     * form is submitted
     */
    get willValidate(): boolean;
    /**
     * A reference to all associated label elements
     */
    get labels(): ReadonlyArray<Node>;
    /**
     * Track whether the value has been changed from the initial value
     */
    private dirtyValue;
    /**
     * Stores a reference to the slot element that holds the proxy
     * element when it is appended.
     */
    private proxySlot;
    /**
     * The value of the element to be associated with the form.
     */
    value: string;
    /**
     * Invoked when the `value` property changes
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `valueChanged` method
     * They must be sure to invoke `super.valueChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    protected valueChanged(previous: string, next: string): void;
    /**
     * The initial value of the form. This value sets the `value` property
     * only when the `value` property has not been explicitly set.
     *
     * @remarks
     * HTML Attribute: value
     */
    protected initialValue: string;
    /**
     * Invoked when the `initialValue` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `initialValueChanged` method
     * They must be sure to invoke `super.initialValueChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    protected initialValueChanged(previous: string, next: string): void;
    /**
     * Sets the element's disabled state. A disabled element will not be included during form submission.
     *
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    /**
     * Invoked when the `disabled` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `disabledChanged` method
     * They must be sure to invoke `super.disabledChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    protected disabledChanged(previous: boolean, next: boolean): void;
    /**
     * The name of the element. This element's value will be surfaced during form submission under the provided name.
     *
     * @remarks
     * HTML Attribute: name
     */
    name: string;
    /**
     * Invoked when the `name` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `nameChanged` method
     * They must be sure to invoke `super.nameChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    protected nameChanged(): void;
    /**
     * Require the field to be completed prior to form submission.
     *
     * @remarks
     * HTML Attribute: required
     */
    required: boolean;
    /**
     * Invoked when the `required` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `requiredChanged` method
     * They must be sure to invoke `super.requiredChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    protected requiredChanged(): void;
    /**
     * The proxy element - this element serves as the communication layer with the parent form
     * when form association is not supported by the browser.
     */
    protected abstract proxy: T;
    /**
     * The element internals object. Will only exist
     * in browsers supporting the attachInternals API
     */
    protected elementInternals: ElementInternals;
    /**
     * These are events that are still fired by the proxy
     * element based on user / programmatic interaction.
     *
     * The proxy implementation should be transparent to
     * the app author, so block these events from emitting.
     */
    private proxyEventsToBlock;
    constructor();
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * Return the current validity of the element.
     */
    checkValidity(): boolean;
    /**
     * Return the current validity of the element.
     * If false, fires an invalid event at the element.
     */
    reportValidity(): boolean;
    /**
     * Set the validity of the control. In cases when the elementInternals object is not
     * available (and the proxy element is used to report validity), this function will
     * do nothing unless a message is provided, at which point the setCustomValidity method
     * of the proxy element will be invoked with the provided message.
     * @param flags - Validity flags
     * @param message - Optional message to supply
     * @param anchor - Optional element used by UA to display an interactive validation UI
     */
    setValidity(flags: ValidityStateFlags, message?: string, anchor?: HTMLElement_2): void;
    /**
     * Invoked when a connected component's form or fieldset has it's disabled
     * state changed.
     * @param disabled - the disabled value of the form / fieldset
     */
    formDisabledCallback(disabled: boolean): void;
    private proxyInitialized;
    /**
     * Attach the proxy element to the DOM
     */
    protected attachProxy(): void;
    /**
     * Detach the proxy element from the DOM
     */
    protected detachProxy(): void;
    /**
     * Associates the provided value (and optional state) with the parent form.
     * @param value - The value to set
     * @param state - The state object provided to during session restores and when autofilling.
     */
    protected setFormValue(value: File | string | FormData | null, state?: File | string | FormData | null): void;
    protected keypressHandler(e: KeyboardEvent): void;
    /**
     * Used to stop propagation of proxy element events
     * @param e - Event object
     */
    private stopPropagation;
}

/**
 * a method to determine the current localization direction of the view
 * @param rootNode - the HTMLElement to begin the query from, usually "this" when used in a component controller
 * @public
 */
export declare const getDirection: (rootNode: HTMLElement) => Direction;

/**
 * A CSS fragment to set `display: none;` when the host is hidden using the [hidden] attribute.
 * @public
 */
export declare const hidden = ":host([hidden]){display:none}";

declare interface HTMLElement_2 {
    attachInternals?(): ElementInternals;
    click(): void;
}

/**
 * Determines if the element is {@link DesignSystemConsumer}
 * @param element - the element to test.
 * @public
 */
export declare function isDesignSystemConsumer(element: HTMLElement | DesignSystemConsumer): element is DesignSystemConsumer;

/**
 * check if the item is a tree item
 * @public
 * @remarks
 * determines if element is an HTMLElement and if it has the role treeitem
 */
export declare function isTreeItemElement(el: Element): el is HTMLElement;

/**
 * An abstract behavior to react to media queries. Implementations should implement
 * the `constructListener` method to perform some action based on media query changes.
 *
 * @public
 */
export declare abstract class MatchMediaBehavior implements Behavior {
    /**
     * The media query that the behavior operates on.
     */
    readonly query: MediaQueryList;
    /**
     *
     * @param query - The media query to operate from.
     */
    constructor(query: MediaQueryList);
    /**
     * Constructs a function that will be invoked with the MediaQueryList context
     * @param source - the element the behavior is acting on.
     */
    protected abstract constructListener(source: typeof FASTElement): MediaQueryListListener;
    /**
     * Binds the behavior to the element.
     * @param source - The element for which the behavior is bound.
     */
    bind(source: typeof FASTElement & HTMLElement): void;
    /**
     * Unbinds the behavior from the element.
     * @param source - The element for which the behavior is unbinding.
     */
    unbind(source: typeof FASTElement & HTMLElement): void;
    /**
     * The behavior needs to operate on element instances but elements might share a behavior instance.
     * To ensure proper attachment / detachment per instance, we construct a listener for
     * each bind invocation and cache the listeners by element reference.
     */
    private listenerCache;
}

/**
 * A behavior to add or remove a stylesheet from an element based on a media query. The behavior ensures that
 * styles are applied while the a query matches the environment and that styles are not applied if the query does
 * not match the environment.
 *
 * @public
 */
export declare class MatchMediaStyleSheetBehavior extends MatchMediaBehavior {
    /**
     * The media query that the behavior operates on.
     */
    readonly query: MediaQueryList;
    /**
     * The styles object to be managed by the behavior.
     */
    readonly styles: ElementStyles;
    /**
     * Constructs a {@link MatchMediaStyleSheetBehavior} instance.
     * @param query - The media query to operate from.
     * @param styles - The styles to coordinate with the query.
     */
    constructor(query: MediaQueryList, styles: ElementStyles);
    /**
     * Defines a function to construct {@link MatchMediaStyleSheetBehavior | MatchMediaStyleSheetBehaviors} for
     * a provided query.
     * @param query - The media query to operate from.
     *
     * @public
     * @example
     *
     * ```ts
     * import { css } from "@microsoft/fast-element";
     * import { MatchMediaStyleSheetBehavior } from "@microsoft/fast-foundation";
     *
     * const landscapeBehavior = MatchMediaStyleSheetBehavior.with(
     *   window.matchMedia("(orientation: landscape)")
     * );
     * const styles = css`
     *   :host {
     *     width: 200px;
     *     height: 400px;
     *   }
     * `
     * .withBehaviors(landscapeBehavior(css`
     *   :host {
     *     width: 400px;
     *     height: 200px;
     *   }
     * `))
     * ```
     */
    static with(query: MediaQueryList): (styles: ElementStyles) => MatchMediaStyleSheetBehavior;
    /**
     * Constructs a match-media listener for a provided element.
     * @param source - the element for which to attach or detach styles.
     * @internal
     */
    protected constructListener(source: typeof FASTElement): MediaQueryListListener;
    /**
     * Unbinds the behavior from the element.
     * @param source - The element for which the behavior is unbinding.
     * @internal
     */
    unbind(source: typeof FASTElement & HTMLElement): void;
}

/**
 * Construct a behavior factory that will conditionally apply a stylesheet based
 * on a MediaQueryList
 *
 * @param query - The MediaQueryList to subscribe to matches for.
 *
 * @public
 * @deprecated - use {@link MatchMediaStyleSheetBehavior.with}
 */
export declare function matchMediaStylesheetBehaviorFactory(query: MediaQueryList): (styles: ElementStyles) => MatchMediaStyleSheetBehavior;

/**
 * An event listener fired by a {@link https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList | MediaQueryList }.
 * @public
 */
export declare type MediaQueryListListener = (this: MediaQueryList, ev?: MediaQueryListEvent) => void;

/**
 * A Menu Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#menu | ARIA menu }.
 *
 * @public
 */
export declare class Menu extends FASTElement {
    /**
     * @internal
     */
    items: HTMLSlotElement;
    private itemsChanged;
    private menuItems;
    /**
     * The index of the focusable element in the items array
     * defaults to -1
     */
    private focusIndex;
    private static focusableElementRoles;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * Focuses the first item in the menu.
     *
     * @public
     */
    focus(): void;
    /**
     * @internal
     */
    handleMenuKeyDown(e: KeyboardEvent): void | boolean;
    /**
     * if focus is moving out of the menu, reset to a stable initial state
     * @internal
     */
    handleFocusOut: (e: FocusEvent) => void;
    private setItems;
    private resetItems;
    /**
     * get an array of valid DOM children
     */
    private domChildren;
    /**
     * check if the item is a menu item
     */
    private isMenuItemElement;
    /**
     * check if the item is disabled
     */
    private isDisabledElement;
    /**
     * check if the item is focusable
     */
    private isFocusableElement;
    private handleMenuItemFocus;
    private setFocus;
}

/**
 * A Switch Custom HTML Element.
 * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#menuitem | ARIA menuitem }, {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemcheckbox | ARIA menuitemcheckbox}, or {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemradio | ARIA menuitemradio }.
 *
 * @public
 */
export declare class MenuItem extends FASTElement {
    /**
     * The disabled state of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    /**
     * The expanded state of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: expanded
     */
    expanded: boolean;
    /**
     * The role of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: role
     */
    role: MenuItemRole;
    /**
     * The checked value of the element.
     *
     * @public
     * @remarks
     * HTML Attribute: checked
     */
    checked: boolean;
    /**
     * @internal
     */
    handleMenuItemKeyDown: (e: KeyboardEvent) => boolean;
    /**
     * @internal
     */
    handleMenuItemClick: (e: MouseEvent) => void;
    private invoke;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface MenuItem extends StartEnd {
}

/**
 * Menu items roles.
 * @public
 */
export declare enum MenuItemRole {
    menuitem = "menuitem",
    menuitemcheckbox = "menuitemcheckbox",
    menuitemradio = "menuitemradio"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(MenuItem:class)} component.
 * @public
 */
export declare const MenuItemTemplate: import("@microsoft/fast-element").ViewTemplate<MenuItem, any>;

/**
 * The template for the {@link @microsoft/fast-foundation#Menu} component.
 * @public
 */
export declare const MenuTemplate: import("@microsoft/fast-element").ViewTemplate<Menu, any>;

/**
 * The template for the {@link @microsoft/fast-foundation#BaseProgress} component.
 * @public
 */
export declare const ProgressRingTemplate: import("@microsoft/fast-element").ViewTemplate<BaseProgress, any>;

/**
 * The template for the {@link @microsoft/fast-foundation#BaseProgress} component.
 * @public
 */
export declare const ProgressTemplate: import("@microsoft/fast-element").ViewTemplate<BaseProgress, any>;

/**
 * An Switch Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#switch | ARIA switch }.
 *
 * @public
 */
export declare class Radio extends FormAssociated<HTMLInputElement> implements RadioControl {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * The name of the radio. See {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/name | name attribute} for more info.
     *
     * @public
     * @remarks
     * HTML Attribute: name
     */
    name: string;
    protected nameChanged(): void;
    /**
     * The element's value to be included in form submission when checked.
     * Default to "on" to reach parity with input[type="radio"]
     *
     * @internal
     */
    protected initialValue: string;
    /**
     * Provides the default checkedness of the input element
     * Passed down to proxy
     *
     * @public
     * @remarks
     * HTML Attribute: checked
     */
    checkedAttribute: boolean;
    private checkedAttributeChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * Initialized to the value of the checked attribute. Can be changed independently of the "checked" attribute,
     * but changing the "checked" attribute always additionally sets this value.
     *
     * @public
     */
    defaultChecked: boolean;
    private defaultCheckedChanged;
    /**
     * The checked state of the control
     *
     * @public
     */
    checked: boolean;
    private checkedChanged;
    protected proxy: HTMLInputElement;
    /**
     * Tracks whether the "checked" property has been changed.
     * This is necessary to provide consistent behavior with
     * normal input radios
     */
    private dirtyChecked;
    /**
     * @internal
     */
    connectedCallback(): void;
    private updateForm;
    /**
     * @internal
     */
    keypressHandler: (e: KeyboardEvent) => void;
    /**
     * @internal
     */
    clickHandler: (e: MouseEvent) => void;
}

/**
 * A structure representing a Radio element
 * @public
 */
export declare type RadioControl = Pick<HTMLInputElement, "checked" | "disabled" | "readOnly" | "focus" | "setAttribute" | "getAttribute">;

/**
 * An Radio Group Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#radiogroup | ARIA radiogroup }.
 *
 * @public
 */
export declare class RadioGroup extends FASTElement {
    /**
     * When true, the child radios will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * Disables the radio group and child radios.
     *
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    private disabledChanged;
    /**
     * The name of the radio group. Setting this value will set the name value
     * for all child radio elements.
     *
     * @public
     * @remarks
     * HTML Attribute: name
     */
    name: string;
    protected nameChanged(): void;
    /**
     * The value of the checked radio
     *
     * @public
     * @remarks
     * HTML Attribute: value
     */
    value: string;
    /**
     * The orientation of the group
     *
     * @public
     * @remarks
     * HTML Attribute: orientation
     */
    orientation: Orientation;
    childItems: HTMLElement[];
    /**
     * @internal
     */
    slottedRadioButtons: HTMLElement[];
    private slottedRadioButtonsChanged;
    private selectedRadio;
    private focusedRadio;
    private parentToolbar;
    private isInsideToolbar;
    private direction;
    constructor();
    /**
     * @internal
     */
    connectedCallback(): void;
    private setupRadioButtons;
    private keypressHandler;
    private radioChangeHandler;
    private moveToRadioByIndex;
    private moveRightOffGroup;
    private moveLeftOffGroup;
    private focusOutHandler;
    private clickHandler;
    private shouldMoveOffGroupToTheRight;
    private shouldMoveOffGroupToTheLeft;
    private checkFocusedRadio;
    private moveRight;
    private moveLeft;
    /**
     * keyboard handling per https://w3c.github.io/aria-practices/#for-radio-groups-not-contained-in-a-toolbar
     * navigation is different when there is an ancestor with role='toolbar'
     *
     * @internal
     */
    keydownHandler: (e: KeyboardEvent) => void;
}

/**
 * The template for the {@link @microsoft/fast-foundation#RadioGroup} component.
 * @public
 */
export declare const RadioGroupTemplate: import("@microsoft/fast-element").ViewTemplate<RadioGroup, any>;

/**
 * The template for the {@link @microsoft/fast-foundation#Radio} component.
 * @public
 */
export declare const RadioTemplate: import("@microsoft/fast-element").ViewTemplate<Radio, any>;

/**
 * An Switch Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#slider | ARIA slider }.
 *
 * @public
 */
export declare class Slider extends FormAssociated<HTMLInputElement> implements SliderConfiguration {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * @internal
     */
    track: HTMLDivElement;
    /**
     * @internal
     */
    thumb: HTMLDivElement;
    /**
     * @internal
     */
    direction: Direction;
    /**
     * @internal
     */
    isDragging: boolean;
    /**
     * @internal
     */
    position: string;
    /**
     * @internal
     */
    trackWidth: number;
    /**
     * @internal
     */
    trackMinWidth: number;
    /**
     * @internal
     */
    trackHeight: number;
    /**
     * @internal
     */
    trackLeft: number;
    /**
     * @internal
     */
    trackMinHeight: number;
    /**
     * Custom function that generates a string for the component's "aria-valuetext" attribute based on the current value.
     *
     * @public
     */
    valueTextFormatter: (value: string) => string | null;
    /**
     * The element's value to be included in form submission changed.
     * @internal
     */
    protected valueChanged(previous: string, next: string): void;
    /**
     * The minimum allowed value
     *
     * @defaultValue - 0
     * @public
     * HTML Attribute: min
     */
    min: number;
    private minChanged;
    /**
     * The maximum allowed value
     *
     * @defaultValue - 10
     * @public
     * HTML Attribute: max
     */
    max: number;
    private maxChanged;
    /**
     * Value to increment or decrement via arrow keys, mouse click or drag
     *
     * @public
     * HTML Attribute: step
     */
    step: number;
    private stepChanged;
    /**
     * Orientation of the slider
     *
     * @public
     * HTML Attribute: orientation
     */
    orientation: Orientation;
    private orientationChanged;
    /**
     * The selection mode
     *
     * @public
     * HTML Attribute: mode
     */
    mode: SliderMode;
    protected proxy: HTMLInputElement;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * Increment the value by the step
     *
     * @public
     */
    increment: () => void;
    /**
     * Decrement the value by the step
     *
     * @public
     */
    decrement: () => void;
    protected keypressHandler: (e: KeyboardEvent) => void;
    private setThumbPositionForOrientation;
    private setupTrackConstraints;
    private setupListeners;
    private setupDefaultValue;
    /**
     *  Handle mouse moves during a thumb drag operation
     */
    private handleThumbMouseDown;
    /**
     *  Handle mouse moves during a thumb drag operation
     */
    private handleMouseMove;
    private calculateNewValue;
    /**
     * Handle a window mouse up during a drag operation
     */
    private handleWindowMouseUp;
    private stopDragging;
    private handleMouseDown;
    private convertToConstrainedValue;
}

/**
 * The configuration structure of {@link Slider}.
 * @public
 */
export declare interface SliderConfiguration {
    max: number;
    min: number;
    orientation?: Orientation;
    direction?: Direction;
    disabled?: boolean;
}

/**
 * A label element intended to be used with the {@link @microsoft/fast-foundation#Slider} component.
 *
 * @public
 */
export declare class SliderLabel extends FASTElement {
    /**
     * @internal
     */
    positionStyle: string;
    /**
     * @internal
     */
    root: HTMLDivElement;
    /**
     * The position of the label relative to the min and max value of the parent {@link @microsoft/fast-foundation#Slider}.
     * @public
     * HTML Attribute: position
     */
    position: string;
    private positionChanged;
    /**
     * Hides the tick mark.
     *
     * @public
     * HTML Attribute: hide-mark
     */
    hideMark: boolean;
    /**
     * The disabled state of the label. This is generally controlled by the parent {@link @microsoft/fast-foundation#Slider}.
     *
     * @public
     * HTML Attribute: disabled
     */
    disabled: boolean;
    /**
     * @internal
     */
    sliderOrientation: Orientation;
    /**
     * @internal
     */
    sliderMinPosition: number;
    /**
     * @internal
     */
    sliderMaxPosition: number;
    /**
     * @internal
     */
    sliderDirection: Direction;
    private notifier;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    /**
     * @internal
     */
    handleChange(source: any, propertyName: string): void;
    private isSliderConfig;
    private getSliderConfiguration;
    private positionAsStyle;
}

/**
 * The template for the {@link @microsoft/fast-foundation#SliderLabel} component.
 * @public
 */
export declare const SliderLabelTemplate: import("@microsoft/fast-element").ViewTemplate<SliderLabel, any>;

/**
 * The selection modes of a {@link Slider}
 * @public
 */
export declare enum SliderMode {
    singleValue = "single-value"
}

/**
 * The template for the {@link @microsoft/fast-foundation#Slider} component.
 * @public
 */
export declare const SliderTemplate: import("@microsoft/fast-element").ViewTemplate<Slider, any>;

/**
 * A mixin class implementing start and end elements.
 * These are generally used to decorate text elements with icons or other visual indicators.
 * @public
 */
export declare class StartEnd {
    start: HTMLSlotElement;
    startContainer: HTMLSpanElement;
    handleStartContentChange(): void;
    end: HTMLSlotElement;
    endContainer: HTMLSpanElement;
    handleEndContentChange(): void;
}

/**
 * The template for the start element.
 * For use with {@link StartEnd}
 *
 * @public
 */
export declare const startTemplate: import("@microsoft/fast-element").ViewTemplate<StartEnd, any>;

/**
 * @alpha
 */
export declare const supportsElementInternals: boolean;

/**
 * A Switch Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#switch | ARIA switch }.
 *
 * @public
 */
export declare class Switch extends FormAssociated<HTMLInputElement> {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * The element's value to be included in form submission when checked.
     * Default to "on" to reach parity with input[type="checkbox"]
     *
     * @internal
     */
    protected initialValue: string;
    /**
     * The checked attribute value. This sets the initial checked value.
     *
     * @public
     * HTML Attribute: checked
     */
    checkedAttribute: boolean;
    private checkedAttributeChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * Initialized to the value of the checked attribute. Can be changed independently of the "checked" attribute,
     * but changing the "checked" attribute always additionally sets this value.
     *
     * @public
     */
    defaultChecked: boolean;
    private defaultCheckedChanged;
    /**
     * The checked state of the control.
     *
     * @public
     */
    checked: boolean;
    private checkedChanged;
    protected proxy: HTMLInputElement;
    /**
     * Tracks whether the "checked" property has been changed.
     * This is necessary to provide consistent behavior with
     * normal input checkboxes
     */
    private dirtyChecked;
    /**
     * @internal
     */
    connectedCallback(): void;
    private updateForm;
    /**
     * @internal
     */
    keypressHandler: (e: KeyboardEvent) => void;
    /**
     * @internal
     */
    clickHandler: (e: MouseEvent) => void;
}

/**
 * The template for the {@link @microsoft/fast-foundation#Switch} component.
 * @public
 */
export declare const SwitchTemplate: import("@microsoft/fast-element").ViewTemplate<Switch, any>;

/**
 * A Tab Component to be used with {@link @microsoft/fast-foundation#(Tabs:class)}
 * @public
 */
export declare class Tab extends FASTElement {
}

/**
 * A TabPanel Component to be used with {@link @microsoft/fast-foundation#(Tabs:class)}
 * @public
 */
export declare class TabPanel extends FASTElement {
}

/**
 * The template for the {@link @microsoft/fast-foundation#TabPanel} component.
 * @public
 */
export declare const TabPanelTemplate: import("@microsoft/fast-element").ViewTemplate<TabPanel, any>;

/**
 * An Tabs Custom HTML Element.
 * Implements the {@link https://www.w3.org/TR/wai-aria-1.1/#tablist | ARIA tablist }.
 *
 * @public
 */
export declare class Tabs extends FASTElement {
    /**
     * The orientation
     * @public
     * @remarks
     * HTML Attribute: orientation
     */
    orientation: TabsOrientation;
    /**
     * The id of the active tab
     *
     * @public
     * @remarks
     * HTML Attribute: activeid
     */
    activeid: string;
    /**
     * @internal
     */
    tabs: HTMLElement[];
    /**
     * @internal
     */
    tabsChanged(): void;
    /**
     * @internal
     */
    tabpanels: HTMLElement[];
    /**
     * @internal
     */
    tabpanelsChanged(): void;
    /**
     * Whether or not to show the active indicator
     * @public
     * @remarks
     * HTML Attribute: activeindicator
     */
    activeindicator: boolean;
    /**
     * @internal
     */
    activeIndicatorRef: HTMLElement;
    /**
     * A reference to the active tab
     * @public
     */
    activetab: HTMLElement;
    private prevActiveTabIndex;
    private activeTabIndex;
    private ticking;
    private tabIds;
    private tabpanelIds;
    private direction;
    private change;
    private getActiveIndex;
    private setTabs;
    private setTabPanels;
    private getTabIds;
    private getTabPanelIds;
    private setComponent;
    private handleTabClick;
    private isHorizontal;
    private handleTabKeyDown;
    private handleActiveIndicatorPosition;
    private animateActiveIndicator;
    /**
     * The adjust method for FASTTabs
     * @public
     * @remarks
     * This method allows the active index to be adjusted by numerical increments
     */
    adjust(adjustment: number): void;
    private focusTab;
    constructor();
    /**
     * @internal
     */
    connectedCallback(): void;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface Tabs extends StartEnd {
}

/**
 * The orientation of the {@link @microsoft/fast-foundation#(Tabs:class)} component
 * @public
 */
export declare enum TabsOrientation {
    vertical = "vertical",
    horizontal = "horizontal"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(Tabs:class)} component.
 * @public
 */
export declare const TabsTemplate: import("@microsoft/fast-element").ViewTemplate<Tabs, any>;

/**
 * The template for the {@link @microsoft/fast-foundation#Tab} component.
 * @public
 */
export declare const TabTemplate: import("@microsoft/fast-element").ViewTemplate<Tab, any>;

/**
 * An Text Area Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/textarea | <textarea> element }.
 *
 * @public
 */
export declare class TextArea extends FormAssociated<HTMLTextAreaElement> {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * The resize mode of the element.
     * @public
     * @remarks
     * HTML Attribute: resize
     */
    resize: TextAreaResize;
    /**
     * A reference to the internal textarea element
     * @internal
     */
    control: HTMLTextAreaElement;
    /**
     * Indicates that this element should get focus after the page finishes loading.
     * @public
     * @remarks
     * HTML Attribute: autofocus
     */
    autofocus: boolean;
    private autofocusChanged;
    /**
     * The {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/id | id} of the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/form | form} the element is associated to
     * @public
     */
    formId: string;
    /**
     * Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}.
     * @public
     * @remarks
     * HTML Attribute: list
     */
    list: string;
    private listChanged;
    /**
     * The maximum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: maxlength
     */
    maxlength: number;
    private maxlengthChanged;
    /**
     * The minimum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: minlength
     */
    minlength: number;
    private minlengthChanged;
    /**
     * The name of the element.
     * @public
     * @remarks
     * HTML Attribute: name
     */
    name: string;
    /**
     * Sets the placeholder value of the element, generally used to provide a hint to the user.
     * @public
     * @remarks
     * HTML Attribute: placeholder
     * Using this attribute does is not a valid substitute for a labeling element.
     */
    placeholder: string;
    /**
     * Sizes the element horizontally by a number of character columns.
     *
     * @public
     * @remarks
     * HTML Attribute: cols
     */
    cols: number;
    /**
     * Sizes the element vertically by a number of character columns.
     *
     * @public
     * @remarks
     * HTML Attribute: rows
     */
    rows: number;
    /**
     * Sets if the element is eligible for spell checking
     * but the UA.
     * @public
     * @remarks
     * HTML Attribute: spellcheck
     */
    spellcheck: boolean;
    private spellcheckChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    protected proxy: HTMLTextAreaElement;
    /**
     * @internal
     */
    handleTextInput: () => void;
    /**
     * Change event handler for inner control.
     * @remarks
     * "Change" events are not `composable` so they will not
     * permeate the shadow DOM boundary. This fn effectively proxies
     * the change event, emitting a `change` event whenever the internal
     * control emits a `change` event
     * @internal
     */
    handleChange(): void;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface TextArea extends DelegatesARIATextbox {
}

/**
 * Resize mode for a TextArea
 * @public
 */
export declare enum TextAreaResize {
    /**
     * No resize.
     */
    none = "none",
    /**
     * Resize vertically and horizontally.
     */
    both = "both",
    /**
     * Resize horizontally.
     */
    horizontal = "horizontal",
    /**
     * Resize vertically.
     */
    vertical = "vertical"
}

/**
 * The template for the {@link @microsoft/fast-foundation#(TextArea:class)} component.
 * @public
 */
export declare const TextAreaTemplate: import("@microsoft/fast-element").ViewTemplate<TextArea, any>;

/**
 * An Text Field Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text | <input type="text" /> element }.
 *
 * @public
 */
export declare class TextField extends FormAssociated<HTMLInputElement> {
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/readonly | readonly HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: readonly
     */
    readOnly: boolean;
    private readOnlyChanged;
    /**
     * Indicates that this element should get focus after the page finishes loading. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#htmlattrdefautofocus | autofocus HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: autofocus
     */
    autofocus: boolean;
    private autofocusChanged;
    /**
     * Sets the placeholder value of the element, generally used to provide a hint to the user.
     * @public
     * @remarks
     * HTML Attribute: placeholder
     * Using this attribute does is not a valid substitute for a labeling element.
     */
    placeholder: string;
    private placeholderChanged;
    /**
     * Allows setting a type or mode of text.
     * @public
     * @remarks
     * HTML Attribute: type
     */
    type: TextFieldType;
    private typeChanged;
    /**
     * Allows associating a {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/datalist | datalist} to the element by {@link https://developer.mozilla.org/en-US/docs/Web/API/Element/id}.
     * @public
     * @remarks
     * HTML Attribute: list
     */
    list: string;
    private listChanged;
    /**
     * The maximum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: maxlength
     */
    maxlength: number;
    private maxlengthChanged;
    /**
     * The minimum number of characters a user can enter.
     * @public
     * @remarks
     * HTMLAttribute: minlength
     */
    minlength: number;
    private minlengthChanged;
    /**
     * A regular expression that the value must match to pass validation.
     * @public
     * @remarks
     * HTMLAttribute: pattern
     */
    pattern: string;
    private patternChanged;
    /**
     * Sets the width of the element to a specified number of characters.
     * @public
     * @remarks
     * HTMLAttribute: size
     */
    size: number;
    private sizeChanged;
    /**
     * Sets the width of the element to a specified number of characters.
     * @public
     * @remarks
     * HTMLAttribute: size
     */
    spellcheck: boolean;
    private spellcheckChanged;
    /**
     * @internal
     */
    defaultSlottedNodes: Node[];
    /**
     * A reference to the internal input element
     * @internal
     */
    control: HTMLInputElement;
    protected proxy: HTMLInputElement;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    keypressHandler: (e: KeyboardEvent) => boolean;
    /**
     * Handles the internal control's `input` event
     * @internal
     */
    handleTextInput(): void;
    /**
     * Change event handler for inner control.
     * @remarks
     * "Change" events are not `composable` so they will not
     * permeate the shadow DOM boundary. This fn effectively proxies
     * the change event, emitting a `change` event whenever the internal
     * control emits a `change` event
     * @internal
     */
    handleChange(): void;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast/issues/3317
 * @internal
 */
export declare interface TextField extends StartEnd, DelegatesARIATextbox {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(TextField:class)} component.
 * @public
 */
export declare const TextFieldTemplate: import("@microsoft/fast-element").ViewTemplate<TextField, any>;

/**
 * Text field sub-types
 * @public
 */
export declare enum TextFieldType {
    /**
     * An email TextField
     */
    email = "email",
    /**
     * A password TextField
     */
    password = "password",
    /**
     * A telephone TextField
     */
    tel = "tel",
    /**
     * A text TextField
     */
    text = "text",
    /**
     * A URL TextField
     */
    url = "url"
}

/**
 * A Tree item Custom HTML Element.
 *
 * @public
 */
export declare class TreeItem extends FASTElement {
    /**
     * When true, the control will be appear expanded by user interaction.
     * @public
     * @remarks
     * HTML Attribute: expanded
     */
    expanded: boolean;
    /**
     * When true, the control will appear selected by user interaction.
     * @public
     * @remarks
     * HTML Attribute: selected
     */
    selected: boolean;
    /**
     * When true, the control will be immutable by user interaction. See {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/disabled | disabled HTML attribute} for more information.
     * @public
     * @remarks
     * HTML Attribute: disabled
     */
    disabled: boolean;
    expandCollapseButton: HTMLDivElement;
    focusable: boolean;
    childItems: HTMLElement[];
    items: HTMLElement[];
    private itemsChanged;
    /**
     * @internal
     */
    nested: boolean;
    renderCollapsedChildren: boolean;
    private notifier;
    private getParentTreeNode;
    /**
     * @internal
     */
    connectedCallback(): void;
    /**
     * @internal
     */
    disconnectedCallback(): void;
    handleChange(source: any, propertyName: string): void;
    handleFocus: (e: Event) => void;
    handleBlur: (e: FocusEvent) => void;
    handleKeyDown: (e: KeyboardEvent) => void | boolean;
    handleExpandCollapseButtonClick: () => void;
    handleContainerClick: (e: MouseEvent) => void;
    childItemLength(): number;
    readonly isNestedItem: () => boolean;
    private handleArrowLeft;
    private handleArrowRight;
    private handleSpaceBar;
    private focusNextNode;
    private getVisibleNodes;
    private getTreeRoot;
    private handleSelected;
    private setExpanded;
}

/**
 * Mark internal because exporting class and interface of the same name
 * confuses API documenter.
 * TODO: https://github.com/microsoft/fast-dna/issues/3317
 * @internal
 */
export declare interface TreeItem extends StartEnd {
}

/**
 * The template for the {@link @microsoft/fast-foundation#(TreeItem:class)} component.
 * @public
 */
export declare const TreeItemTemplate: import("@microsoft/fast-element").ViewTemplate<TreeItem, any>;

/**
 * A Tree view Custom HTML Element.
 * Implements the {@link https://w3c.github.io/aria-practices/#TreeView | ARIA TreeView }.
 *
 * @public
 */
export declare class TreeView extends FASTElement {
    treeView: HTMLElement;
    renderCollapsedNodes: boolean;
    focusable: boolean;
    currentSelected: HTMLElement | TreeItem | null;
    private lastFocused;
    private nested;
    slottedTreeItems: HTMLElement[];
    private slottedTreeItemsChanged;
    private checkForNestedItems;
    private treeItems;
    handleBlur: (e: FocusEvent) => void;
    handleFocus: (e: FocusEvent) => void;
    connectedCallback(): void;
    handleKeyDown: (e: KeyboardEvent) => void | boolean;
    private setItems;
    private resetItems;
    private handleItemSelected;
    /**
     * check if the item is focusable
     */
    private isFocusableElement;
    /**
     * check if the item is disabled
     */
    private isDisabledElement;
    private getVisibleNodes;
    /**
     * Verifies that the tree has a focusable child.
     * If it does not, the tree will begin to accept focus
     */
    private ensureFocusability;
}

/**
 * The template for the {@link @microsoft/fast-foundation#TreeView} component.
 * @public
 */
export declare const TreeViewTemplate: import("@microsoft/fast-element").ViewTemplate<TreeView, any>;

/**
 * This file enables typing support for ElementInternals APIs.
 * It is largely taken from https://github.com/microsoft/TSJS-lib-generator/pull/818/files.
 *
 * When TypeScript adds support for these APIs we can delete this file.
 */
declare interface ValidityStateFlags {
    badInput?: boolean;
    customError?: boolean;
    patternMismatch?: boolean;
    rangeOverflow?: boolean;
    rangeUnderflow?: boolean;
    stepMismatch?: boolean;
    tooLong?: boolean;
    tooShort?: boolean;
    typeMismatch?: boolean;
    valueMissing?: boolean;
}

export { }
