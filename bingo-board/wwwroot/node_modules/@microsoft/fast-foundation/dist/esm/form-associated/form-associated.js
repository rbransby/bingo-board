import { __decorate } from "tslib";
import { attr, DOM, emptyArray, FASTElement, observable } from "@microsoft/fast-element";
import { keyCodeEnter } from "@microsoft/fast-web-utilities";
const proxySlotName = "form-associated-proxy";
/**
 * @alpha
 */
export const supportsElementInternals = "ElementInternals" in window;
/**
 * Base class for providing Custom Element Form Association.
 *
 * @alpha
 */
export class FormAssociated extends FASTElement {
    constructor() {
        super();
        /**
         * Track whether the value has been changed from the initial value
         */
        this.dirtyValue = false;
        /**
         * The initial value of the form. This value sets the `value` property
         * only when the `value` property has not been explicitly set.
         *
         * @remarks
         * HTML Attribute: value
         */
        this.initialValue = "";
        /**
         * Sets the element's disabled state. A disabled element will not be included during form submission.
         *
         * @remarks
         * HTML Attribute: disabled
         */
        this.disabled = false;
        /**
         * Require the field to be completed prior to form submission.
         *
         * @remarks
         * HTML Attribute: required
         */
        this.required = false;
        /**
         * These are events that are still fired by the proxy
         * element based on user / programmatic interaction.
         *
         * The proxy implementation should be transparent to
         * the app author, so block these events from emitting.
         */
        this.proxyEventsToBlock = ["change", "click"];
        this.proxyInitialized = false;
        if (supportsElementInternals) {
            this.elementInternals = this.attachInternals();
        }
    }
    /**
     * Must evaluate to true to enable elementInternals.
     * Feature detects API support and resolve respectively
     *
     * @internal
     */
    static get formAssociated() {
        return supportsElementInternals;
    }
    /**
     * Returns the validity state of the element
     */
    get validity() {
        return supportsElementInternals
            ? this.elementInternals.validity
            : this.proxy.validity;
    }
    /**
     * Retrieve a reference to the associated form.
     * Returns null if not associated to any form.
     */
    get form() {
        return supportsElementInternals ? this.elementInternals.form : this.proxy.form;
    }
    /**
     * Retrieve the localized validation message,
     * or custom validation message if set.
     */
    get validationMessage() {
        return supportsElementInternals
            ? this.elementInternals.validationMessage
            : this.proxy.validationMessage;
    }
    /**
     * Whether the element will be validated when the
     * form is submitted
     */
    get willValidate() {
        return supportsElementInternals
            ? this.elementInternals.willValidate
            : this.proxy.willValidate;
    }
    /**
     * A reference to all associated label elements
     */
    get labels() {
        if (supportsElementInternals) {
            return Object.freeze(Array.from(this.elementInternals.labels));
        }
        else if (this.proxy instanceof HTMLElement &&
            this.proxy.ownerDocument &&
            this.id) {
            // Labels associated by wrapping the element: <label><custom-element></custom-element></label>
            const parentLabels = this.proxy.labels;
            // Labels associated using the `for` attribute
            const forLabels = Array.from(this.proxy.getRootNode().querySelectorAll(`[for='${this.id}']`));
            const labels = parentLabels
                ? forLabels.concat(Array.from(parentLabels))
                : forLabels;
            return Object.freeze(labels);
        }
        else {
            return emptyArray;
        }
    }
    /**
     * Invoked when the `value` property changes
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `valueChanged` method
     * They must be sure to invoke `super.valueChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    valueChanged(previous, next) {
        this.dirtyValue = true;
        if (this.proxy instanceof HTMLElement) {
            this.proxy.value = this.value;
        }
        this.setFormValue(this.value);
    }
    /**
     * Invoked when the `initialValue` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `initialValueChanged` method
     * They must be sure to invoke `super.initialValueChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    initialValueChanged(previous, next) {
        // If the value is clean and the component is connected to the DOM
        // then set value equal to the attribute value.
        if (!this.dirtyValue && this.$fastController.isConnected) {
            this.value = this.initialValue;
            this.dirtyValue = false;
        }
    }
    /**
     * Invoked when the `disabled` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `disabledChanged` method
     * They must be sure to invoke `super.disabledChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    disabledChanged(previous, next) {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.disabled = this.disabled;
        }
        DOM.queueUpdate(() => this.classList.toggle("disabled", this.disabled));
    }
    /**
     * Invoked when the `name` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `nameChanged` method
     * They must be sure to invoke `super.nameChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    nameChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.name = this.name;
        }
    }
    /**
     * Invoked when the `required` property changes
     *
     * @param previous - the previous value
     * @param next - the new value
     *
     * @remarks
     * If elements extending `FormAssociated` implement a `requiredChanged` method
     * They must be sure to invoke `super.requiredChanged(previous, next)` to ensure
     * proper functioning of `FormAssociated`
     */
    requiredChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.required = this.required;
        }
        DOM.queueUpdate(() => this.classList.toggle("required", this.required));
    }
    /**
     * @internal
     */
    connectedCallback() {
        super.connectedCallback();
        this.value = this.initialValue;
        this.dirtyValue = false;
        if (!supportsElementInternals) {
            this.attachProxy();
        }
    }
    /**
     * @internal
     */
    disconnectedCallback() {
        this.proxyEventsToBlock.forEach(name => this.proxy.removeEventListener(name, this.stopPropagation));
    }
    /**
     * Return the current validity of the element.
     */
    checkValidity() {
        return supportsElementInternals
            ? this.elementInternals.checkValidity()
            : this.proxy.checkValidity();
    }
    /**
     * Return the current validity of the element.
     * If false, fires an invalid event at the element.
     */
    reportValidity() {
        return supportsElementInternals
            ? this.elementInternals.reportValidity()
            : this.proxy.reportValidity();
    }
    /**
     * Set the validity of the control. In cases when the elementInternals object is not
     * available (and the proxy element is used to report validity), this function will
     * do nothing unless a message is provided, at which point the setCustomValidity method
     * of the proxy element will be invoked with the provided message.
     * @param flags - Validity flags
     * @param message - Optional message to supply
     * @param anchor - Optional element used by UA to display an interactive validation UI
     */
    setValidity(flags, message, anchor) {
        if (supportsElementInternals) {
            this.elementInternals.setValidity(flags, message, anchor);
        }
        else if (typeof message === "string") {
            this.proxy.setCustomValidity(message);
        }
    }
    /**
     * Invoked when a connected component's form or fieldset has it's disabled
     * state changed.
     * @param disabled - the disabled value of the form / fieldset
     */
    formDisabledCallback(disabled) {
        this.disabled = disabled;
    }
    /**
     * Attach the proxy element to the DOM
     */
    attachProxy() {
        var _a;
        if (!this.proxyInitialized) {
            this.proxyInitialized = true;
            this.proxy.style.display = "none";
            this.proxyEventsToBlock.forEach(name => this.proxy.addEventListener(name, this.stopPropagation));
            // These are typically mapped to the proxy during
            // property change callbacks, but during initialization
            // on the initial call of the callback, the proxy is
            // still undefined. We should find a better way to address this.
            this.proxy.disabled = this.disabled;
            this.proxy.required = this.required;
            if (typeof this.name === "string") {
                this.proxy.name = this.name;
            }
            if (typeof this.value === "string") {
                this.proxy.value = this.value;
            }
            this.proxy.setAttribute("slot", proxySlotName);
            this.proxySlot = document.createElement("slot");
            this.proxySlot.setAttribute("name", proxySlotName);
        }
        (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.appendChild(this.proxySlot);
        this.appendChild(this.proxy);
    }
    /**
     * Detach the proxy element from the DOM
     */
    detachProxy() {
        var _a;
        this.removeChild(this.proxy);
        (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.removeChild(this.proxySlot);
    }
    /**
     * Associates the provided value (and optional state) with the parent form.
     * @param value - The value to set
     * @param state - The state object provided to during session restores and when autofilling.
     */
    setFormValue(value, state) {
        if (supportsElementInternals && this.elementInternals) {
            this.elementInternals.setFormValue(value, state);
        }
    }
    keypressHandler(e) {
        switch (e.keyCode) {
            case keyCodeEnter:
                if (this.form instanceof HTMLFormElement) {
                    // Implicit submission
                    const defaultButton = this.form.querySelector("[type=submit]");
                    defaultButton === null || defaultButton === void 0 ? void 0 : defaultButton.click();
                }
                break;
        }
    }
    /**
     * Used to stop propagation of proxy element events
     * @param e - Event object
     */
    stopPropagation(e) {
        e.stopPropagation();
    }
}
__decorate([
    observable
], FormAssociated.prototype, "value", void 0);
__decorate([
    attr({ mode: "fromView", attribute: "value" })
], FormAssociated.prototype, "initialValue", void 0);
__decorate([
    attr({ mode: "boolean" })
], FormAssociated.prototype, "disabled", void 0);
__decorate([
    attr
], FormAssociated.prototype, "name", void 0);
__decorate([
    attr({ mode: "boolean" })
], FormAssociated.prototype, "required", void 0);
