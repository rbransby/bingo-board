import { __decorate } from "tslib";
import { attr, DOM, nullableNumberConverter, observable } from "@microsoft/fast-element";
import { FormAssociated } from "../form-associated/form-associated";
import { ARIAGlobalStatesAndProperties, StartEnd } from "../patterns/index";
import { applyMixins } from "../utilities/index";
/**
 * Text field sub-types
 * @public
 */
export var TextFieldType;
(function (TextFieldType) {
    /**
     * An email TextField
     */
    TextFieldType["email"] = "email";
    /**
     * A password TextField
     */
    TextFieldType["password"] = "password";
    /**
     * A telephone TextField
     */
    TextFieldType["tel"] = "tel";
    /**
     * A text TextField
     */
    TextFieldType["text"] = "text";
    /**
     * A URL TextField
     */
    TextFieldType["url"] = "url";
})(TextFieldType || (TextFieldType = {}));
/**
 * An Text Field Custom HTML Element.
 * Based largely on the {@link https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/text | <input type="text" /> element }.
 *
 * @public
 */
export class TextField extends FormAssociated {
    constructor() {
        super(...arguments);
        /**
         * Allows setting a type or mode of text.
         * @public
         * @remarks
         * HTML Attribute: type
         */
        this.type = TextFieldType.text;
        this.proxy = document.createElement("input");
        /**
         * @internal
         */
        this.keypressHandler = (e) => {
            super.keypressHandler(e);
            return true;
        };
    }
    readOnlyChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.readOnly = this.readOnly;
        }
    }
    autofocusChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.autofocus = this.autofocus;
        }
    }
    placeholderChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.placeholder = this.placeholder;
        }
    }
    typeChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.type = this.type;
        }
    }
    listChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.setAttribute("list", this.list);
        }
    }
    maxlengthChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.maxLength = this.maxlength;
        }
    }
    minlengthChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.minLength = this.minlength;
        }
    }
    patternChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.pattern = this.pattern;
        }
    }
    sizeChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.size = this.size;
        }
    }
    spellcheckChanged() {
        if (this.proxy instanceof HTMLElement) {
            this.proxy.spellcheck = this.spellcheck;
        }
    }
    /**
     * @internal
     */
    connectedCallback() {
        super.connectedCallback();
        this.proxy.setAttribute("type", this.type);
        if (this.autofocus) {
            DOM.queueUpdate(() => {
                this.focus();
            });
        }
    }
    /**
     * Handles the internal control's `input` event
     * @internal
     */
    handleTextInput() {
        this.value = this.control.value;
    }
    /**
     * Change event handler for inner control.
     * @remarks
     * "Change" events are not `composable` so they will not
     * permeate the shadow DOM boundary. This fn effectively proxies
     * the change event, emitting a `change` event whenever the internal
     * control emits a `change` event
     * @internal
     */
    handleChange() {
        this.$emit("change");
    }
}
__decorate([
    attr({ attribute: "readonly", mode: "boolean" })
], TextField.prototype, "readOnly", void 0);
__decorate([
    attr({ mode: "boolean" })
], TextField.prototype, "autofocus", void 0);
__decorate([
    attr
], TextField.prototype, "placeholder", void 0);
__decorate([
    attr
], TextField.prototype, "type", void 0);
__decorate([
    attr
], TextField.prototype, "list", void 0);
__decorate([
    attr({ converter: nullableNumberConverter })
], TextField.prototype, "maxlength", void 0);
__decorate([
    attr({ converter: nullableNumberConverter })
], TextField.prototype, "minlength", void 0);
__decorate([
    attr
], TextField.prototype, "pattern", void 0);
__decorate([
    attr({ converter: nullableNumberConverter })
], TextField.prototype, "size", void 0);
__decorate([
    attr({ mode: "boolean" })
], TextField.prototype, "spellcheck", void 0);
__decorate([
    observable
], TextField.prototype, "defaultSlottedNodes", void 0);
/**
 * Includes ARIA states and properties relating to the ARIA link role
 *
 * @public
 */
/* eslint-disable-next-line */
export class DelegatesARIATextbox extends ARIAGlobalStatesAndProperties {
}
applyMixins(TextField, StartEnd, DelegatesARIATextbox);
