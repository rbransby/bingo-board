import { CaptureType } from "../template";
import { NodeBehaviorBehaviorOptions, NodeObservationBehavior } from "./node-observation";
/**
 * The options used to configure child node observation.
 * @public
 */
export interface ChildrenBehaviorOptions<T = any> extends NodeBehaviorBehaviorOptions<T>, MutationObserverInit {
}
/**
 * The runtime behavior for child node observation.
 * @public
 */
export declare class ChildrenBehavior extends NodeObservationBehavior<ChildrenBehaviorOptions> {
    private observer;
    /**
     * Creates an instance of ChildrenBehavior.
     * @param target - The element target to observe children on.
     * @param options - The options to use when observing the element children.
     */
    constructor(target: HTMLElement, options: ChildrenBehaviorOptions);
    /**
     * Begins observation of the nodes.
     */
    observe(): void;
    /**
     * Disconnects observation of the nodes.
     */
    disconnect(): void;
    /**
     * Retrieves the nodes that should be assigned to the target.
     */
    protected getNodes(): ChildNode[];
}
/**
 * A directive that observes the `childNodes` of an element and updates a property
 * whenever they change.
 * @param propertyOrOptions - The options used to configure child node observation.
 * @public
 */
export declare function children<T = any>(propertyOrOptions: (keyof T & string) | ChildrenBehaviorOptions<keyof T & string>): CaptureType<T>;
