import { __decorate } from "tslib";
import { attr, FASTElement } from "@microsoft/fast-element";
import { keyCodeEnter, keyCodeSpace } from "@microsoft/fast-web-utilities";
import { StartEnd } from "../patterns/start-end";
import { applyMixins } from "../utilities/apply-mixins";
/**
 * Menu items roles.
 * @public
 */
export var MenuItemRole;
(function (MenuItemRole) {
    MenuItemRole["menuitem"] = "menuitem";
    MenuItemRole["menuitemcheckbox"] = "menuitemcheckbox";
    MenuItemRole["menuitemradio"] = "menuitemradio";
})(MenuItemRole || (MenuItemRole = {}));
/**
 * A Switch Custom HTML Element.
 * Implements {@link https://www.w3.org/TR/wai-aria-1.1/#menuitem | ARIA menuitem }, {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemcheckbox | ARIA menuitemcheckbox}, or {@link https://www.w3.org/TR/wai-aria-1.1/#menuitemradio | ARIA menuitemradio }.
 *
 * @public
 */
export class MenuItem extends FASTElement {
    constructor() {
        super(...arguments);
        /**
         * The role of the element.
         *
         * @public
         * @remarks
         * HTML Attribute: role
         */
        this.role = MenuItemRole.menuitem;
        /**
         * @internal
         */
        this.handleMenuItemKeyDown = (e) => {
            switch (e.keyCode) {
                case keyCodeEnter:
                case keyCodeSpace:
                    this.invoke();
                    return false;
            }
            return true;
        };
        /**
         * @internal
         */
        this.handleMenuItemClick = (e) => {
            this.invoke();
        };
        this.invoke = () => {
            if (this.disabled) {
                return;
            }
            switch (this.role) {
                case MenuItemRole.menuitemcheckbox:
                case MenuItemRole.menuitemradio:
                    this.checked = !this.checked;
                    break;
            }
            this.$emit("change");
        };
    }
}
__decorate([
    attr({ mode: "boolean" })
], MenuItem.prototype, "disabled", void 0);
__decorate([
    attr({ attribute: "expanded" })
], MenuItem.prototype, "expanded", void 0);
__decorate([
    attr
], MenuItem.prototype, "role", void 0);
__decorate([
    attr
], MenuItem.prototype, "checked", void 0);
applyMixins(MenuItem, StartEnd);
